MODULE main

	VAR
		a_value: boolean;
		a_isPresent: boolean;
		UpperState: boolean;
		UpperPrev: boolean;
		ModalModelInner:ModalModelInner(a_value,a_isPresent,UpperState,UpperPrev);
		ModalModelInner2:ModalModelInner2(a_value,a_isPresent,UpperState,UpperPrev);
		match: boolean;

	ASSIGN
		init(match) := TRUE;
		next(match) :=
			case
				ModalModelInner.b_value=ModalModelInner2.b_value&ModalModelInner.b_isPresent=ModalModelInner2.b_isPresent: TRUE;
				TRUE: FALSE;
			esac;

	LTLSPEC

		G(match)

MODULE ModalModelInner(a_value,a_isPresent,UpperState,UpperPrev)

	VAR 
		state : {s5,s3,s4};
		a : { ls,0,1,gt };
	ASSIGN 
		init(state) := s3;
		next(state) :=
			case
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s4 & a_value=TRUE & a_isPresent  :{ s5 };
				(UpperState = s2) & state=s4 & a_value=FALSE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s5 & a_value=TRUE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s5 & a_value=FALSE & a_isPresent  :{ s5 };
				UpperState != s2             : { s3 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )   & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=FALSE & a_isPresent )  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & b_isPresent  & a_value=TRUE & a_isPresent  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s5 & b_isPresent  & a_value=FALSE & a_isPresent )  ) ;

		b_isPresent :=  ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )   | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=FALSE & a_isPresent  )  ;


MODULE ModalModelInner2(a_value,a_isPresent,UpperState,UpperPrev)

	VAR 
		state : {s5,s3,s4};
		a : { ls,0,1,gt };
	ASSIGN 
		init(state) := s3;
		next(state) :=
			case
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s4 & a_value=TRUE & a_isPresent  :{ s5 };
				(UpperState = s2) & state=s4 & a_value=FALSE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s5 & a_value=TRUE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s5 & a_value=FALSE & a_isPresent  :{ s5 };
				UpperState != s2             : { s3 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )   & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=FALSE & a_isPresent )  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & b_isPresent  & a_value=TRUE & a_isPresent  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s5 & b_isPresent  & a_value=FALSE & a_isPresent )  ) ;

		b_isPresent :=  ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )   | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=FALSE & a_isPresent  )  ;

