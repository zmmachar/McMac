MODULE main

	VAR
		 a_value: boolean;
		a_isPresent : boolean;
		ModalModel:ModalModel( a_value,a_isPresent );
		ModalModel2:ModalModel2( a_value,a_isPresent );
		match: boolean;

	ASSIGN
		init(match) := TRUE;
		next(match) :=
			case
				ModalModel.b_value=ModalModel2.b_value&ModalModel.b_isPresent=ModalModel2.b_isPresent: TRUE;
				TRUE: FALSE;
			esac;

	LTLSPEC

		G(match)

MODULE ModalModel( a_value,a_isPresent )

	VAR 
		state : {s1,s2};
		a : { ls,0,1,gt };
	ASSIGN 
		init(state) := s1;
		next(state) :=
			case
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s2 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s2 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ( state=s1 & b_isPresent  & a_value=TRUE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=FALSE & a_isPresent )  )   | ( state=s2 & b_isPresent  & a_value=FALSE & a_isPresent  )   & (  !(state=s2 & b_isPresent  & a_value=TRUE & a_isPresent )  )   | ( state=s1 & b_isPresent  & a_value=TRUE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=FALSE & a_isPresent )  ) ;

 		b_isPresent :=  ( state=s1 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=FALSE & a_isPresent  )   | ( state=s2 & a_value=FALSE & a_isPresent  )   | ( state=s2 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=FALSE & a_isPresent  ) ;

 
MODULE ModalModel2( a_value,a_isPresent )

	VAR 
		state : {s1,s2};
		a : { ls,0,1,gt };
	ASSIGN 
		init(state) := s1;
		next(state) :=
			case
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s2 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s2 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ( state=s1 & b_isPresent  & a_value=TRUE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=FALSE & a_isPresent )  )   | ( state=s2 & b_isPresent  & a_value=FALSE & a_isPresent  )   & (  !(state=s2 & b_isPresent  & a_value=TRUE & a_isPresent )  )   | ( state=s1 & b_isPresent  & a_value=TRUE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=FALSE & a_isPresent )  ) ;

 		b_isPresent :=  ( state=s1 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=FALSE & a_isPresent  )   | ( state=s2 & a_value=FALSE & a_isPresent  )   | ( state=s2 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=FALSE & a_isPresent  ) ;

 