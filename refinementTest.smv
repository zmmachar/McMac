
MODULE ModalModelInner( a_value,a_isPresent, UpperState, UpperPrev )
	VAR 
		state : {s3,s5,s4};
		a : { ls,0,1,gt };
	ASSIGN 
		init(state) := s3;
		next(state) :=
			case
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s3 & a_value=TRUE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s3 & a_value=FALSE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s4 & a_value=TRUE & a_isPresent  :{ s5 };
				(UpperState = s2) & state=s4 & a_value=FALSE & a_isPresent  :{ s4 };
				(UpperState = s2) & state=s5 & a_value=TRUE & a_isPresent  :{ s3 };
				(UpperState = s2) & state=s5 & a_value=FALSE & a_isPresent  :{ s5 };
				UpperState != s2             : { s3 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )   & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s3 & b_isPresent  & a_value=FALSE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=TRUE & a_isPresent )  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s4 & b_isPresent  & a_value=FALSE & a_isPresent )  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & b_isPresent  & a_value=TRUE & a_isPresent  )  & ((UpperState = s2| UpperPrev = s2) &  !(state=s5 & b_isPresent  & a_value=FALSE & a_isPresent )  ) ;

		b_isPresent :=  ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )   | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s3 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s4 & a_value=FALSE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=TRUE & a_isPresent  )  | ((UpperState = s2| UpperPrev = s2) & state=s5 & a_value=FALSE & a_isPresent  )  ;


MODULE ModalModel( a_value,a_isPresent )
	VAR 
		ModalModelInner: ModalModelInner( a_value, a_isPresent, state, prev );

 		state : {s2,s1};
		prev: {s2,s1};
		a : { ls,0,1,gt };
	ASSIGN 
		init(prev) := s1;
		next(prev) :=
			case
				TRUE : {state};
			esac;
		init(state) := s1;
		next(state) :=
			case
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s2 & a_value=TRUE & a_isPresent  :{ s1 };
				state=s2 & a_value=TRUE & a_isPresent  :{ s2 };
				state=s1 & a_value=FALSE & a_isPresent  :{ s1 };
				state=s1 & a_value=TRUE & a_isPresent  :{ s2 };
				TRUE             : state;
			esac;

		init(a) := 1;
		next(a) :=
			case
				TRUE             : a;
			esac;


	DEFINE
		b_value :=  ( state=s1 & b_isPresent  & a_value=FALSE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=TRUE & a_isPresent )  )   & (  !(state=s2 & b_isPresent  & a_value=TRUE & a_isPresent )  )   | ( state=s1 & b_isPresent  & a_value=FALSE & a_isPresent  )   & (  !(state=s1 & b_isPresent  & a_value=TRUE & a_isPresent )  )  | ModalModelInner.b_value;

		b_isPresent :=  ( state=s1 & a_value=FALSE & a_isPresent  )   | ( state=s1 & a_value=TRUE & a_isPresent  )   | ( state=s2 & a_value=TRUE & a_isPresent  )   | ( state=s1 & a_value=FALSE & a_isPresent  )   | ( state=s1 & a_value=TRUE & a_isPresent  )  | ModalModelInner.b_isPresent;





MODULE main 
		VAR 
			a_value : boolean;
			a_isPresent: boolean;
			ModalModel: ModalModel( a_value, a_isPresent);
	
		LTLSPEC 
			G(ModalModel.state=s1 -> X(ModalModel.ModalModelInner.state = s3))
	
